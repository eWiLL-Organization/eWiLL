version: '3.8'
services:

  # db:
  #     image: postgres:10.3-alpine
  #     container_name: postgres01
  # nginx:
  #     image: nginx:1.13-alpine
  #     container_name: nginx01
  #     ports:
  #       - "8000:8000"
  #     volumes:
  #       - ./project:/src
  #       - D:\Arbeit\eWiLL\modules\core\django_py\nginx\django.conf
  #     depends_on:
  #       - web
  # web:
  #     build:
  #       context: .
  #       dockerfile: modules/core/api/Dockerfile
  #     container_name: django01
  #     command: bash -c "python manage.py makemigrations && python manage.py migrate && python manage.py collectstatic --noinput && gunicorn hello_django.wsgi -b 0.0.0.0:8000"
  #     depends_on:
  #       - db
  #     volumes:
  #       - ./project:/src
  #     expose:
  #       - "8000"
  #     restart: always



  mongo:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/

  core:


    container_name: core
    restart: unless-stopped
    depends_on:
        - postgres
    build:
        context: .
        dockerfile: modules/core/api/Dockerfile
    volumes:
      - .:/app
    ports:
      - "8080:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/postgres
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update

  postgres:
    container_name: postgres
    image: postgres:14.1-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
      - POSTGRES_HOST=postgres
    ports:
    # TODO remove for production
      - '5433:5432'
    volumes: 
      - data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  data: